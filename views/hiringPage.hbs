<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hiring Form</title>
   
    <!-- Bootstrap 5.1 CSS -->
    <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
    crossorigin="anonymous"
    />

    <!-- Override bootstrap css with my own -->
    <link rel="stylesheet" href="/css/customStyle.css">

    <!-- Bootstrap 5.1 JS Bundle -->
    <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
    crossorigin="anonymous"
    ></script>

</head>
<body>
    <!-- Navigation bar -->
    {{> navbar}}

    <!-- Text fields fill up form -->
    <div class="container mt-5">
        <div class="row justify-content-md-center">
            <div class="col-md-8">
                <form id="hireEmployeeForm">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <input type="text" class="form-control" name="p_first_name" id="fNameInputId" placeholder="First Name" required>
                        </div>
                        <div class="col-md-4">
                            <input type="text" class="form-control" name="p_last_name" id="lNameInputId" placeholder="Last Name" required>
                        </div>
                        <div class="col-md-4">
                            <input type="email" class="form-control" name="p_email" id="emailInputId" placeholder="Email" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <input type="text" class="form-control" name="p_phone" id="phoneInputId" placeholder="Phone" required>
                        </div>
                        <div class="col-md-4">
                            <input type="number" class="form-control" name="p_salary" id="salaryInputId" placeholder="Salary" step="disabled" required>
                        </div>
                    </div>
                    <!-- Hidden fields for job, manager, and department IDs -->
                    <input type="hidden" name="p_job_id" id="jobIdField" required>
                    <input type="hidden" name="p_manager_id" id="managerIdField" required>
                    <input type="hidden" name="p_department_id" id="departmentIdField" required>

                    <div class="row mb-3">
                        <div class="col-md-8">
                            <button type="button" class="btn btn-warning dropdown-toggle" id="dropdownMenuButtonJob" data-bs-toggle="dropdown" aria-expanded="false">
                                Job List
                            </button>
                            <ul class="dropdown-menu" id="jobsInfoDropdown">
                                <!-- Job items will be populated here via JavaScript -->
                            </ul>
                        </div>
                    </div>

                    <!-- Manager Dropdown -->
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <div class="dropdown">
                                <button class="btn btn-warning dropdown-toggle" type="button" id="dropdownMenuButtonManager" data-bs-toggle="dropdown" aria-expanded="false">
                                    Manager List
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton2" id="managersInfoDropdown">
                                    <!-- Manager items here -->
                                </ul>
                            </div>
                        </div>
                    </div>

                    <!-- Departments Dropdown -->
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <div class="dropdown">
                                <button class="btn btn-warning dropdown-toggle" type="button" id="dropdownMenuButtonDepartment" data-bs-toggle="dropdown" aria-expanded="false">
                                    Department List
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton3" id="departmentsInfoDropdown">
                                    <!-- Department items here -->
                                </ul>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12 mt-5">
                            <button type="submit" class="btn btn-primary" id="submitBtn" disabled>Submit</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <script src="/js/validators.js"></script>

    <!-- Fetch JOBS -->
    <script>
    async function fetchJobs() {
        try {
            const response = await fetch('/api/getjobsinfo');
            const jobs = await response.json();

            const dropdownButton = document.getElementById('dropdownMenuButtonJob');
            const dropdown = document.getElementById('jobsInfoDropdown');

            jobs.forEach((job) => {
                const item = document.createElement('li');
                const link = document.createElement('a');
                link.className = 'dropdown-item';
                link.textContent = `[${job.JOB_ID}]  ${job.JOB_TITLE}`;

                link.addEventListener('click', function(event) {
                    event.preventDefault(); 
                    dropdownButton.textContent = this.textContent; 
                    document.getElementById('jobIdField').value = job.JOB_ID;
                    checkRequiredFields();
                });
                item.appendChild(link);
                dropdown.appendChild(item);
            });
        } catch (error) {
            console.error("Failed to fetch jobs:", error); // Error log
        }
    }

    async function fetchManagers() {
        try {
            const response = await fetch('/api/getmanagersinfo');
            const managers = await response.json();

            const dropdownButton = document.getElementById('dropdownMenuButtonManager');
            const dropdown = document.getElementById('managersInfoDropdown');

            managers.forEach((manager) => {
                const item = document.createElement('li');
                const link = document.createElement('a');
                link.className = 'dropdown-item';
                link.textContent = `[${manager.EMPLOYEE_ID}]  ${manager.FIRST_NAME} ${manager.LAST_NAME}`;

                link.addEventListener('click', function(event) {
                    event.preventDefault(); 
                    dropdownButton.textContent = this.textContent;
                    document.getElementById('managerIdField').value = manager.EMPLOYEE_ID;
                    checkRequiredFields();
                });
                item.appendChild(link);
                dropdown.appendChild(item);
            });
        } catch (error) {
            console.error("Failed to fetch managers:", error); // Error log
        }
    }

    async function fetchDepartments() {
        try {
            const response = await fetch('/api/getdepartmentsinfo');
            const departments = await response.json();

            const dropdownButton = document.getElementById('dropdownMenuButtonDepartment');
            const dropdown = document.getElementById('departmentsInfoDropdown');

            departments.forEach((department) => {

                const item = document.createElement('li');
                const link = document.createElement('a');
                link.className = 'dropdown-item';
                link.textContent = `[${department.DEPARTMENT_ID}]  ${department.DEPARTMENT_NAME}`; 

                link.addEventListener('click', function(event) {
                    event.preventDefault(); 
                    dropdownButton.textContent = this.textContent;
                    document.getElementById('departmentIdField').value = department.DEPARTMENT_ID;
                    checkRequiredFields();
                });
                item.appendChild(link);
                dropdown.appendChild(item);
            });
        } catch (error) {
            console.error("Failed to fetch departments:", error); // Error log
        }
    }

    // Handle submit button enable/disable
    document.addEventListener('DOMContentLoaded', (event) => {
        //addErrorBorder('fNameInputId');
        // Real-time validation
        function addInputEventListeners() {
            const requiredInputs = document.querySelectorAll('input[required]');
            requiredInputs.forEach(input => {
                // Use 'input' as event
                input.addEventListener('input', checkRequiredFields);
            });
        }

        addInputEventListeners();
    });

    // Handle form submission
    document.getElementById('hireEmployeeForm').addEventListener('submit', function(event) {
        event.preventDefault();

        const formData = new FormData(this);
        const data = {};
        let validationErrors = []; 

        formData.forEach((value, key) => { 
            data[key] = value; 
            
            // Perform validation on the field values
            if (key === 'p_first_name' && !validateName(value)) {
                validationErrors.push('** Invalid First Name. Only letters and spaces are allowed.');
                addErrorBorder('fNameInputId');
            } else if (key === 'p_last_name' && !validateName(value)) {
                validationErrors.push('** Invalid Last Name. Only letters and spaces are allowed.');
                addErrorBorder('lNameInputId');
            } else if (key === 'p_email' && !validateEmail(value)) {
                validationErrors.push('** Invalid Email. Follow proper email format.');
                addErrorBorder('emailInputId');
            } else if (key === 'p_phone' && !validatePhone(value)) {
                validationErrors.push('** Invalid Phone. Only digits and standard symbols are allowed.');
                addErrorBorder('phoneInputId');
            } else if (key === 'p_salary' && !validateSalary(value)) {
                validationErrors.push('** Invalid Salary. Only digits are allowed.');
                addErrorBorder('salaryInputId');
            }
        });

        // Check if validationErrors[] is empty
        if (validationErrors.length > 0) {
            alert(validationErrors.join('\n'));
        } else {
            // No errors --> Fetch call
            fetch('/hire-employee', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Response failed.'); 
                }
                return response.text();
            })
            .then(message => {
                alert(message);
                resetFormAndDropdowns();
            })
            .catch(error => {
                console.error('Error hiring employee:', error);
                alert('Failed to hire employee.'); // Display error message
            });
        }
    });
        
    // Check if all required fields aren't empty
    function checkRequiredFields() {
        const submitBtn = document.getElementById('submitBtn');
        const requiredInputs = document.querySelectorAll('input[required]');
        const allFilled = Array.from(requiredInputs).every(input => input.value.trim() !== '');
        submitBtn.disabled = !allFilled;
    }

    function resetFormAndDropdowns() {
        // Clear text fields
        document.querySelectorAll('#hireEmployeeForm input[type="text"], #hireEmployeeForm input[type="number"], #hireEmployeeForm input[type="email"]').forEach(input => {
            input.value = '';
        });

        // Reset hidden inputs
        document.querySelectorAll('#hireEmployeeForm input[type="hidden"]').forEach(input => {
            input.value = '';
        });

    // Reset dropdowns
    document.getElementById('dropdownMenuButtonJob').textContent = 'Job List';
    document.getElementById('dropdownMenuButtonManager').textContent = 'Manager List';
    document.getElementById('dropdownMenuButtonDepartment').textContent = 'Department List';
    }

    Promise.all([fetchJobs(), fetchManagers(), fetchDepartments()])
    .then(() => {
        console.log("All data fetched successfully");
    })
    .catch((error) => {
        console.error("Error fetching initial data:", error);
    });

    </script>

</body>
</html>