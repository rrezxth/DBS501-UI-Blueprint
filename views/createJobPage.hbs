<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New Job</title>
    
    <!-- Bootstrap 5.1 CSS -->
    <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
    crossorigin="anonymous"
    />

    <!-- Override bootstrap css with my own -->
    <link rel="stylesheet" href="/css/customStyle.css">

    <!-- Bootstrap 5.1 JS Bundle -->
    <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
    crossorigin="anonymous"
    ></script>

</head>
<body>
    <!-- Navigation bar -->
    {{> navbar}}

    <!-- Text fields fill up form -->
    <div class="container mt-5">
    <div class="row justify-content-center">
            <div class="col-md-8">
                <form id="createJobForm">
                    <div class="row mb-3">
                        <div class="col-md-3 offset-md-2"> 
                            <input type="text" class="form-control" name="p_job_id" id="jobInputId" placeholder="Job ID" aria-label="Job ID" required>
                        </div>
                        <div class="col-md-5">
                            <input type="text" class="form-control" name="p_job_title" id="jobTitleInputId" placeholder="Job Title" aria-label="Job Title" required>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-3 offset-md-2">
                            <input type="number" class="form-control" name="p_min_salary" id="minSalaryInputId" placeholder="Minimum Salary" aria-label="Minimum Salary" required>
                        </div>
                        <div class="col-md-3">
                            <input type="number" class="form-control" name="p_max_salary" id="maxSalaryInputId" placeholder="Maximum Salary" aria-label="Maximum Salary" required>
                        </div>
                    </div>

                    <!-- button -->
                    <div class="row mt-5 mb-3"> 
                        <div class="col-md-8 offset-md-2"> 
                            <button type="submit" class="btn btn-primary btn-block" id="submitBtn" disabled>Submit</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="/js/validators.js"></script>
    <script>
    // Handle submit button enable/disable
    document.addEventListener('DOMContentLoaded', (event) => {
        //addErrorBorder('fNameInputId');
        // Real-time validation
        function addInputEventListeners() {
            const requiredInputs = document.querySelectorAll('input[required]');
            requiredInputs.forEach(input => {
                // Use 'input' as event
                input.addEventListener('input', checkRequiredFields);
            });
        }

        addInputEventListeners();
    });

    // Handle form submission
    document.getElementById('createJobForm').addEventListener('submit', function(event) {
        event.preventDefault();

        const formData = new FormData(this);
        const data = {};
        let validationErrors = []; 

        formData.forEach((value, key) => { 
            data[key] = value; 
            
            // Perform validation on the field values
            if (key === 'p_job_id' && !validateJobId(value)) {
                validationErrors.push('** Invalid Job ID. Follow proper format.');
                addErrorBorder('jobInputId');
            } else if (key === 'p_job_title' && !validateName(value)) {
                validationErrors.push('** Invalid Job Title. Only letters and spaces are allowed.');
                addErrorBorder('jobTitleInputId');
            } else if (key === 'p_min_salary' && !validateSalary(value)) {
                validationErrors.push('** Invalid Salary. Only non-negative digits are allowed.');
                addErrorBorder('minSalaryInputId');
            } else if (key === 'p_max_salary' && !validateSalary(value)) {
                validationErrors.push('** Invalid Salary. Only non-negative digits are allowed.');
                addErrorBorder('maxSalaryInputId');
            }
        });

        // Check if validationErrors[] is empty
        if (validationErrors.length > 0) {
            alert(validationErrors.join('\n'));
        } else {
            // No errors --> Fetch call
            fetch('/create-job', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            })
            .then(response => {
                // ERROR 409, Primary Key conflict
                if (response.status === 409) {
                    return response.json().then(data => {
                        alert(data.error); 
                        addErrorBorder('jobInputId');
                    });
                } else if (!response.ok) {
                    // Handle other types of errors
                    return Promise.reject('An error occurred'); 
                } else {
                    // For successful requests, show a success message and reset the form
                    return response.text().then(message => {
                        alert(message);
                        removeErrorBorder('jobInputId');
                        removeErrorBorder('jobTitleInputId');
                        removeErrorBorder('minSalaryInputId');
                        removeErrorBorder('maxSalaryInputId');
                        resetFormAndDropdowns(); // Only reset when successful
                    });
                }
            })
            .catch(error => {
                console.error('Error creating job:', error);
                alert('Failed to create job.'); // Display error message
            });
        }
    });

    // Check if all required fields aren't empty
    function checkRequiredFields() {
        const submitBtn = document.getElementById('submitBtn');
        const requiredInputs = document.querySelectorAll('input[required]');
        const allFilled = Array.from(requiredInputs).every(input => input.value.trim() !== '');
        submitBtn.disabled = !allFilled;
    }

    function resetFormAndDropdowns() {
    // Clear text fields
        document.querySelectorAll('#createJobForm input[type="text"], #createJobForm input[type="number"]').forEach(input => {
            input.value = '';
        });
    }

    </script>

</body>
</html>