<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Display All Employees</title>
    
    <!-- Bootstrap 5.1 CSS -->
    <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
    rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
    crossorigin="anonymous"
    />

    <!-- Override bootstrap css with my own -->
    <link rel="stylesheet" href="/css/customStyle.css">

    <!-- Bootstrap 5.1 JS Bundle -->
    <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
    crossorigin="anonymous"
    ></script>

    <!-- Cog icon -->
    <link 
    rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />

</head>
<body>
    <!-- Navigation bar -->
    {{> navbar}}

    <!-- Table of employees -->
    <div class="container mt-4">
        <table id="empTable" class="table">
            <thead>
            <tr>
                <th scope="col">Emp ID</th>
                <th scope="col">Name</th>
                <th scope="col">Email</th>
                <th scope="col">Phone</th>
                <th scope="col">Hire Date</th>
                <th scope="col">Job ID</th>
                <th scope="col">Salary</th>
                <th scope="col">Commission</th>
                <th scope="col">Mngr ID</th>
                <th scope="col">Dept ID</th>
                <th scope="col"></th>
            </tr>
            </thead>
            <tbody>
                <!-- Rows -->
            </tbody>
        </table>
    </div>

    <!-- Show Modal -->
    <div class="modal fade" id="editEmployeeModal" tabindex="-1" aria-labelledby="editEmployeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="editEmployeeModalLabel">Edit Employee</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <!-- Form fields -->
            <form id="editEmployeeForm">
            <!-- Selected row -->
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" id="cancelBtn" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="saveBtn" onclick="saveChanges()">Save Changes</button>
        </div>
        </div>
    </div>
    </div>





    <script src="/js/validators.js"></script>
    <script>
    async function populateTable() {
        const tableBody = document.querySelector('.table tbody');
        tableBody.innerHTML = '';
        try {
            // Fetch
            const response = await fetch('/api/getemployeesinfo');
            const employees = await response.json();

            // To be used in date formatting
            const monthNames = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"];

            // Iterate
            employees.forEach(employee => {
                const row = document.createElement('tr');
                const properties = ['EMPLOYEE_ID', 'NAME', 'EMAIL', 'PHONE_NUMBER', 'HIRE_DATE', 'JOB_ID', 'SALARY', 'COMMISSION_PCT', 'MANAGER_ID', 'DEPARTMENT_ID'];
                properties.forEach(property => {
                    const cell = document.createElement('td');
                    
                    if (property === 'NAME') {
                        cell.textContent = `${employee['FIRST_NAME']} ${employee['LAST_NAME']}`;
                    } else if (property === 'HIRE_DATE') {
                        const date = new Date(employee[property]);
                        cell.textContent = `${monthNames[date.getMonth()]}-${date.getDate().toString().padStart(2, '0')}-${date.getFullYear()}`;
                    /* Design choice
                    } else if (property === 'COMMISSION_PCT')  {
                        const percentage = employee.COMMISSION_PCT * 100;
                        cell.textContent = `${percentage}%`; 
                    */
                    } else {
                        cell.textContent = employee[property] || ''; 
                    }

                    row.appendChild(cell);
                });

                // Add edit-icon cog
                const editCell = document.createElement('td');
                editCell.innerHTML = '<i class="fas fa-cog edit-icon" style="cursor: pointer;"></i>';

                editCell.querySelector('.edit-icon').addEventListener('click', (event) => {
                    editRow(event.target);
                });

                row.appendChild(editCell);

                tableBody.appendChild(row);
            });
        } catch (error) {
            console.error('Could not load the data:', error);
        }
    }

    function editRow(cogIcon) {
        //console.log('COG clicked!');

        const row = cogIcon.closest('tr');
        const cells = row.querySelectorAll('td:not(:last-child)'); // Exclude the last cell with the cog icon
        const form = document.getElementById('editEmployeeForm');

        // Clear the form first
        form.innerHTML = '';

        const fieldNames = ['EMPLOYEE_ID', 'NAME', 'EMAIL', 'PHONE_NUMBER', 'HIRE_DATE', 'JOB_ID', 'SALARY', 'COMMISSION_PCT', 'MANAGER_ID', 'DEPARTMENT_ID'];
        const editableFields = ['SALARY', 'PHONE_NUMBER', 'EMAIL']; 

        fieldNames.forEach((name, index) => {
            const isEditable = editableFields.includes(name);
            const value = cells[index].textContent; // Current cell value

            const inputGroup = document.createElement('div');
            inputGroup.className = 'mb-3';

            const label = document.createElement('label');
            label.className = 'form-label';
            label.textContent = name.replace('_', ' ').toUpperCase();
            label.setAttribute('for', name);
            label.style.fontWeight = 'bold';    // BOLD the titles

            inputGroup.appendChild(label);

            if (isEditable) {
                // INPUT for mutable properties
                const input = document.createElement('input');
                input.type = 'text';
                input.className = 'form-control';
                input.id = name;
                input.value = value;
                inputGroup.appendChild(input);
            } else {
                // LABEL for non-mutable properties
                const staticText = document.createElement('span');
                staticText.className = 'form-control-plaintext';
                staticText.id = name;
                staticText.textContent = value;
                inputGroup.appendChild(staticText);
            }

            form.appendChild(inputGroup);
        });

        // Show the modal
        var modal = new bootstrap.Modal(document.getElementById('editEmployeeModal'));
        modal.show();

    }

    function saveChanges() {
        let validationErrors = []; 

        const employeeIdLabel = document.querySelector('#editEmployeeForm #EMPLOYEE_ID');
        const employee_id = employeeIdLabel.textContent;

        const emailInput = document.querySelector('#editEmployeeForm #EMAIL');
        const email = emailInput.value;
        if (!email.trim() || !validateEmail(email)) {
            validationErrors.push('** Invalid Email. Follow proper email format.');
            document.querySelector('#editEmployeeForm #EMAIL').classList.add('input-error');
        }
    
        const phoneInput = document.querySelector('#editEmployeeForm #PHONE_NUMBER');
        const phone = phoneInput.value;
        if (!phone.trim() || !validatePhone(phone)) {
            validationErrors.push('** Invalid Phone. Follow proper phone format.');
            document.querySelector('#editEmployeeForm #PHONE').classList.add('input-error');
        }

        const salaryInput = document.querySelector('#editEmployeeForm #SALARY');
        const salary = salaryInput.value;
        if (!salary.trim() || !validateSalary(salary)) {
            validationErrors.push('** Invalid Salary. Only non-negative digits are allowed.');
            document.querySelector('#editEmployeeForm #SALARY').classList.add('input-error');
        }
            
        if (validationErrors.length > 0) {
            alert(validationErrors);
        } else {        // No errors
            // also hides the modal
            sendDataToServer(employee_id, email, phone, salary);
        }
    }

    async function sendDataToServer(employee_id, email, phone, salary) {
        try {
            const data = { p_employee_id: employee_id, p_email: email, p_phone: phone, p_salary: salary };
            const response = await fetch('/update-employee', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            if (!response.ok) {
                const errorResponse = await response.json(); 
                alert(errorResponse.error);
                document.querySelector('#editEmployeeForm #SALARY').classList.add('input-error');
            } else {
                // OK
                alert(await response.text());   
                var editEmployeeModal = bootstrap.Modal.getInstance(document.getElementById('editEmployeeModal'));
                editEmployeeModal.hide();
                await populateTable();
            }

        } catch (error) {
            console.error('Error:', error);
        }
    }

    populateTable();
    </script>

</body>
</html>